# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Books\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Model/'
            - '../src/Kernel.php'
            - '../src/Event/'
            - '../src/Response/'
            - '../src/Api/Request/'

    Books\Api\Request\Book\BookIdResolver:
        class: Books\Api\Request\Book\BookIdResolver
        tags:
            - controller.argument_value_resolver:
                name: bookId
                priority: 150

    EventSauce\EventSourcing\Serialization\ObjectMapperPayloadSerializer:
        class: EventSauce\EventSourcing\Serialization\ObjectMapperPayloadSerializer

    EventSauce\EventSourcing\Serialization\ConstructingMessageSerializer:
        class: EventSauce\EventSourcing\Serialization\ConstructingMessageSerializer
        arguments:
            $payloadSerializer: '@EventSauce\EventSourcing\Serialization\ObjectMapperPayloadSerializer'

    EventSauce\IdEncoding\StringIdEncoder:
        class: EventSauce\IdEncoding\StringIdEncoder

    EventSauce\MessageRepository\DoctrineMessageRepository\DoctrineMessageRepository:
        class: EventSauce\MessageRepository\DoctrineMessageRepository\DoctrineMessageRepository
        arguments:
            $connection: '@doctrine.dbal.default_connection'
            $tableName: 'message'
            $serializer: '@EventSauce\EventSourcing\Serialization\ConstructingMessageSerializer'
            $aggregateRootIdEncoder: '@EventSauce\IdEncoding\StringIdEncoder'

    EventSauce\EventSourcing\MessageRepository:
        alias: EventSauce\MessageRepository\DoctrineMessageRepository\DoctrineMessageRepository

    EventSauce\EventSourcing\SynchronousMessageDispatcher:
        class: EventSauce\EventSourcing\SynchronousMessageDispatcher

    EventSauce\EventSourcing\MessageDispatcher:
        alias: EventSauce\EventSourcing\SynchronousMessageDispatcher

    Books\Repository\AggregateRoot\BookRepository: ~

